package com.jimware.generator.comon.util;

import org.mybatis.generator.api.GeneratedJavaFile;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.DefaultJavaFormatter;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.exception.ShellException;
import org.mybatis.generator.internal.DefaultShellCallback;
import org.springframework.util.StringUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.atomic.AtomicLong;

/**
 * @author wangjing0131
 */
public class TopSerializablePlugin extends PluginAdapter {
	private static AtomicLong atomicLong = new AtomicLong(-Long.MAX_VALUE);
	private FullyQualifiedJavaType serializable;
	private FullyQualifiedJavaType gwtSerializable;
    private FullyQualifiedJavaType map;
    private FullyQualifiedJavaType list;
    private FullyQualifiedJavaType digits;
    private FullyQualifiedJavaType notNull;
    private FullyQualifiedJavaType defaultAnn;
    private FullyQualifiedJavaType pattern;
    private FullyQualifiedJavaType size;
	private boolean addGWTInterface;
	private boolean suppressJavaInterface;
	private boolean condition;
	private boolean conditionDate;
	private String conditionClass;
	private String conditionPackage;
	private String conditionProject;
    private String voTargetPackage;
    private String entitiesTargetPackage;
    private String voTargetProject;
    private String validatorTargetProject;
    private String validatorTargetPackage;
    private List<GeneratedJavaFile> additionalJavaFiles = new ArrayList<GeneratedJavaFile>();
    private DBCommentGenerator commentGenerator = new DBCommentGenerator();
    private DefaultShellCallback shellCallback = new DefaultShellCallback(true);

    public TopSerializablePlugin() {
        super();
        serializable = new FullyQualifiedJavaType("java.io.Serializable");
        gwtSerializable = new FullyQualifiedJavaType("com.google.gwt.user.client.rpc.IsSerializable");
        //date = new FullyQualifiedJavaType("java.util.Date");
        map = new FullyQualifiedJavaType("java.util.Map");
        list = new FullyQualifiedJavaType("java.util.List");

	}

    @Override
	public boolean validate(List<String> warnings) {
        // this plugin is always valid
        return true;
    }

    @Override
    public void setProperties(Properties properties) {
        super.setProperties(properties);
        addGWTInterface = Boolean.valueOf(properties.getProperty("addGWTInterface"));
        suppressJavaInterface = Boolean.valueOf(properties.getProperty("suppressJavaInterface"));
		condition = Boolean.valueOf(properties.getProperty("condition"));
		conditionDate = Boolean.valueOf(properties.getProperty("conditionDate"));
		conditionClass=properties.getProperty("conditionClass");
		conditionPackage=properties.getProperty("conditionPackage");
		conditionProject=properties.getProperty("conditionProject");
		voTargetPackage = properties.getProperty("voTargetPackage");
        entitiesTargetPackage = properties.getProperty("entitiesTargetPackage");
        voTargetProject = properties.getProperty("voTargetProject");
        validatorTargetProject = properties.getProperty("validatorTargetProject");
        validatorTargetPackage = properties.getProperty("validatorTargetPackage");
    }
    
    

    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        makeSerializable(topLevelClass, introspectedTable);
        return true;
    }

    @Override
    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        makeSerializable(topLevelClass, introspectedTable);
        return true;
    }

    @Override
    public boolean modelRecordWithBLOBsClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        makeSerializable(topLevelClass, introspectedTable);
        return true;
    }

    @Override
	public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
			IntrospectedTable introspectedTable) {
    	topLevelClass.addJavaDocLine("/**\r\n* Criteria\r\n* @author auto generated by project\r\n*/");

		Field f;
		Method m;
		for (InnerClass inner : topLevelClass.getInnerClasses()){
			if ("GeneratedCriteria".equals(inner.getType().getShortName())){
				StringBuilder remarks = new StringBuilder(), properties = new StringBuilder();
				for (IntrospectedColumn col : introspectedTable.getNonBLOBColumns()){
//					remarks.append(remarks.length() > 0 ? "," : "").append(col.getRemarks());
					properties.append(properties.length() > 0 ? "," : "").append(col.getJavaProperty());
				}
				f = new Field("supportedProperties", FullyQualifiedJavaType.getStringInstance());
				f.setFinal(true);
				f.setStatic(true);
				f.setVisibility(JavaVisibility.PRIVATE);
				f.setInitializationString(properties.insert(0, "\"").append("\"").toString());
				topLevelClass.addField(f);
				f = new Field("supportedOperates", FullyQualifiedJavaType.getStringInstance());
				f.setFinal(true);
				f.setStatic(true);
				f.setVisibility(JavaVisibility.PRIVATE);
				f.setInitializationString("\"IsNull,IsNotNull,EqualTo,NotEqualTo,GreaterThan,GreaterThanOrEqualTo,LessThan,LessThanOrEqualTo,Like,NotLike,Between,NotBetween,In,NotIn\"");//see ExampleGenerator
				topLevelClass.addField(f);
				m = new Method("fetchSupportedProperties");
				m.setVisibility(JavaVisibility.PUBLIC);
				m.setReturnType(FullyQualifiedJavaType.getStringInstance());
				m.addBodyLine("return supportedProperties;");
				topLevelClass.addMethod(m);
				m = new Method("fetchSupportedOperates");
				m.setVisibility(JavaVisibility.PUBLIC);
				m.setReturnType(FullyQualifiedJavaType.getStringInstance());
				m.addBodyLine("return supportedOperates;");
				topLevelClass.addMethod(m);
				topLevelClass.addImportedType("java.util.Map");
				topLevelClass.addImportedType("java.lang.reflect.Method");
			}else if ("Criterion".equals(inner.getType().getShortName())){
				m = new Method(inner.getType().getShortName());
				m.setConstructor(true);
				m.setVisibility(JavaVisibility.PUBLIC);
				m.addBodyLine("");
				inner.addMethod(m);
				for (Field field : inner.getFields()){
					m = new Method("set"+ StringUtils.capitalize(field.getName()));
					m.addParameter(new Parameter(field.getType(), field.getName()));
					m.setVisibility(JavaVisibility.PUBLIC);
					m.addBodyLine("this."+field.getName()+" = "+field.getName()+";");
					inner.addMethod(m);
				}
			}
		}
		return true;
	}

	@Override
	public List<GeneratedJavaFile> contextGenerateAdditionalJavaFiles() {
		return additionalJavaFiles;
	}
	
	private void genCondition(TopLevelClass gened, IntrospectedTable introspectedTable){
		File directory, targetFile;
		String baseType = introspectedTable.getBaseRecordType();
		if(condition){
			FullyQualifiedJavaType conditionType = new FullyQualifiedJavaType(baseType.replaceAll(entitiesTargetPackage, conditionPackage).replaceAll("Bean", "Condition"));
			TopLevelClass topLevelClass = new TopLevelClass(conditionType);
			topLevelClass.setVisibility(JavaVisibility.PUBLIC);
			topLevelClass.addJavaDocLine("/**\r\n* Condition\r\n* @author auto generated by project\r\n*/");
			topLevelClass.addImportedType(serializable);
			topLevelClass.addSuperInterface(serializable);
			Field field = new Field();
			field.setFinal(true);
			field.setInitializationString(String.valueOf(atomicLong
					.incrementAndGet()) + "L");
			field.setName("serialVersionUID");
			field.setStatic(true);
			field.setType(new FullyQualifiedJavaType("long"));
			field.setVisibility(JavaVisibility.PRIVATE);
			context.getCommentGenerator().addFieldComment(field, introspectedTable);
			topLevelClass.getFields().add(0, field);
			topLevelClass.addImportedType(conditionClass);
			topLevelClass.addSuperInterface(new FullyQualifiedJavaType(conditionClass));
			topLevelClass.addImportedType(baseType);
			topLevelClass.setSuperClass(new FullyQualifiedJavaType(baseType));
			if(conditionDate){
				for(IntrospectedColumn column: introspectedTable.getBaseColumns()){
					if("java.util.Date".equals(column.getFullyQualifiedJavaType().getFullyQualifiedName())){
						field = new Field();
						field.setVisibility(JavaVisibility.PRIVATE);
						field.setType(new FullyQualifiedJavaType("Date"));
						field.setName("start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1));
						context.getCommentGenerator().addFieldComment(field, introspectedTable);
						topLevelClass.getFields().add(field);
						topLevelClass.addImportedType("java.util.Date");
						field = new Field();
						field.setVisibility(JavaVisibility.PRIVATE);
						field.setType(new FullyQualifiedJavaType("Date"));
						field.setName("end"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1));
						context.getCommentGenerator().addFieldComment(field, introspectedTable);
						topLevelClass.getFields().add(field);
						Method m = new Method();
						m.setName("set"+"Start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1));
						m.setVisibility(JavaVisibility.PUBLIC);
						m.addParameter(new Parameter(new FullyQualifiedJavaType("Date"),"start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)));
						m.setReturnType(new FullyQualifiedJavaType("void"));
						m.addBodyLine("this."+"start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)
						+"="+"start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)+";");
						topLevelClass.addMethod(m);
						m = new Method();
						m.setName("set"+"End"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1));
						m.setVisibility(JavaVisibility.PUBLIC);
						m.addParameter(new Parameter(new FullyQualifiedJavaType("Date"),"end"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)));
						m.setReturnType(new FullyQualifiedJavaType("void"));
						m.addBodyLine("this."+"end"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)
								+"="+"end"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)+";");
						topLevelClass.addMethod(m);
						m = new Method();
						m.setName("get"+"Start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1));
						m.setVisibility(JavaVisibility.PUBLIC);
						m.setReturnType(new FullyQualifiedJavaType("Date"));
						m.addBodyLine("return "+"this.start"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)+";");
						topLevelClass.addMethod(m);
						m = new Method();
						m.setName("get"+"End"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1));
						m.setVisibility(JavaVisibility.PUBLIC);
						m.setReturnType(new FullyQualifiedJavaType("Date"));
						m.addBodyLine("return "+"this.end"+column.getJavaProperty().substring(0,1).toUpperCase()+column.getJavaProperty().substring(1)+";");
						topLevelClass.addMethod(m);
					}
				}
			}
			try {
				directory = shellCallback.getDirectory(conditionProject, topLevelClass.getType().getPackageName().replaceAll("\\.", "/"));
				targetFile = new File(directory, topLevelClass.getType().getShortNameWithoutTypeArguments()+".java");
				if (targetFile.exists() && targetFile.isFile()) {
					return;
				}else{
					additionalJavaFiles.add(new GeneratedJavaFile(topLevelClass, conditionProject, new DefaultJavaFormatter()));
				}
			} catch (ShellException e) {
				return;
			}
		}

	}
	
	private void genAdditionalJavaFiles(TopLevelClass gened, IntrospectedTable introspectedTable) {
		genCondition(gened, introspectedTable);


	}
	protected void makeSerializable(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {

		topLevelClass.addJavaDocLine("/**\r\n* Entity\r\n* @author auto generated by project\r\n*/");
		
		topLevelClass.addImportedType(serializable);

		topLevelClass.addImportedType(map);

		topLevelClass.addSuperInterface(serializable);

		Field field = new Field();
		field.setFinal(true);
		field.setInitializationString(String.valueOf(atomicLong
				.incrementAndGet()) + "L");
		field.setName("serialVersionUID");
		field.setStatic(true);
		field.setType(new FullyQualifiedJavaType("long"));
		field.setVisibility(JavaVisibility.PRIVATE);
		context.getCommentGenerator().addFieldComment(field, introspectedTable);
		topLevelClass.getFields().add(0, field);

		String name = introspectedTable.getBaseRecordType().substring(
				introspectedTable.getBaseRecordType().lastIndexOf(".") + 1,
				introspectedTable.getBaseRecordType().length());

		Method m = new Method();
		m.setName("build");
		m.setVisibility(JavaVisibility.PUBLIC);
		m.setStatic(true);
		m.setReturnType(new FullyQualifiedJavaType(introspectedTable
				.getBaseRecordType()));
		m.addBodyLine("return new " + name + "();");
		topLevelClass.addMethod(m);

            
        List<Method> list = new ArrayList<Method>();
        for (Method method : topLevelClass.getMethods()){
        	if ("equals".equals(method.getName())
        			|| "hashCode".equals(method.getName()) || name.equals(method.getName())){
        		list.add(method);
        	}
        }
        topLevelClass.getMethods().removeAll(list);
        
		StringBuilder sb = new StringBuilder();
		if (introspectedTable.hasBLOBColumns()){
			m = new Method();
			m.setName(name);
			m.setConstructor(true);
			m.setVisibility(JavaVisibility.PUBLIC);
			m.setStatic(false);
			m.addJavaDocLine("/**\r\n\t * auto generated by project\r\n\t */");
			for (IntrospectedColumn introspectedColumn : introspectedTable.getNonBLOBColumns()) {
	            m.addParameter(new Parameter(introspectedColumn.getFullyQualifiedJavaType(),
	                    introspectedColumn.getJavaProperty()));
	        }
	        
	        for (IntrospectedColumn introspectedColumn : introspectedTable.getNonBLOBColumns()) {
	            sb.setLength(0);
	            sb.append("this."); //$NON-NLS-1$
	            sb.append(introspectedColumn.getJavaProperty());
	            sb.append(" = "); //$NON-NLS-1$
	            sb.append(introspectedColumn.getJavaProperty());
	            sb.append(';');
	            m.addBodyLine(sb.toString());
	        }
			topLevelClass.getMethods().add(0, m);
			m = new Method();
			m.setName(name);
			m.setConstructor(true);
			m.setVisibility(JavaVisibility.PUBLIC);
			m.setStatic(false);
			m.addBodyLine("super();");
			m.addJavaDocLine("/**\r\n\t * auto generated by project\r\n\t */");
			topLevelClass.getMethods().add(1, m);
		}
		
        genAdditionalJavaFiles(topLevelClass, introspectedTable);
    }

	@Override
	public boolean modelSetterMethodGenerated(Method method,
                                              TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn,
                                              IntrospectedTable introspectedTable, ModelClassType modelClassType) {
		method.setReturnType(new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()));
		method.addBodyLine("return this;");
		return super.modelSetterMethodGenerated(method, topLevelClass,
				introspectedColumn, introspectedTable, modelClassType);
	}

	@Override
	public boolean modelGetterMethodGenerated(Method method,
                                              TopLevelClass topLevelClass, IntrospectedColumn introspectedColumn,
                                              IntrospectedTable introspectedTable, ModelClassType modelClassType) {
//		return false;
		return true;
	}
	
	
}
